---
- name: Kill stuck Docker processes (if any)
  command: killall -9 docker
  become: yes
  ignore_errors: yes

- name: Restart Docker service
  service:
    name: docker
    state: restarted
  become: yes

- name: Create MongoDB data directory
  file:
    path: "{{ mongo_data_dir }}"
    state: directory
    mode: '0777'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  become: yes

- name: Set SELinux context for MongoDB data directory
  command: chcon -Rt svirt_sandbox_file_t {{ mongo_data_dir }}
  become: yes
  when: selinux_enabled

- name: Check if MongoDB container exists
  command: docker ps -a -q -f name={{ mongo_container_name }}
  register: mongo_container_exists
  changed_when: false
  become: yes

- name: Remove existing MongoDB container
  command: docker rm -f {{ mongo_container_name }}
  become: yes
  when: mongo_container_exists.stdout != ""

- name: Pull MongoDB Docker image
  docker_image:
    name: "{{ mongo_image }}"
    source: pull
  become: yes

- name: Run MongoDB container with CLI
  command: >
    docker run -d 
    --name {{ mongo_container_name }} 
    --restart always 
    --network {{ docker_network_name }} 
    -v {{ mongo_data_dir }}:/data/db:Z 
    -e MONGO_INITDB_ROOT_USERNAME={{ mongo_username }} 
    -e MONGO_INITDB_ROOT_PASSWORD={{ mongo_password }} 
    -e MONGO_INITDB_DATABASE={{ mongo_db_name }} 
    -p {{ mongo_host_port }}:{{ mongo_container_port }} 
    --privileged 
    {{ mongo_image }}
  become: yes
  ignore_errors: yes

- name: Check MongoDB container status
  command: docker inspect -f {% raw %}'{{.State.Status}}'{% endraw %} {{ mongo_container_name }}
  register: mongo_status
  changed_when: false
  become: yes
  ignore_errors: yes

- name: Show MongoDB container status
  debug:
    msg: "MongoDB container status: {{ mongo_status.stdout }}"
